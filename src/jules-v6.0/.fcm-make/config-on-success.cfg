name = 
steps = extract preprocess build
dest = /home/lufla/workspace/BRAMS-6.0/source/jules-v6.0
build.prop{ar, class} = ar
build.prop{ar.flags, class} = rs
build.prop{archive-ok-target-category, class} = include o
build.prop{cc, class} = gcc
build.prop{cc.defs, class} = 
build.prop{cc.flag-compile, class} = -c
build.prop{cc.flag-define, class} = -D%s
build.prop{cc.flag-include, class} = -I%s
build.prop{cc.flag-lib, class} = -l%s
build.prop{cc.flag-lib-path, class} = -L%s
build.prop{cc.flag-omp, class} = 
build.prop{cc.flag-output, class} = -o%s
build.prop{cc.flags, class} = 
build.prop{cc.flags-ld, class} = 
build.prop{cc.include-paths, class} = 
build.prop{cc.lib-paths, class} = 
build.prop{cc.libs, class} = 
build.prop{checksum-method, class} = 
build.prop{class, cxx} = g++
build.prop{class, cxx.defs} = 
build.prop{class, cxx.flag-compile} = -c
build.prop{class, cxx.flag-define} = -D%s
build.prop{class, cxx.flag-include} = -I%s
build.prop{class, cxx.flag-lib} = -l%s
build.prop{class, cxx.flag-lib-path} = -L%s
build.prop{class, cxx.flag-omp} = 
build.prop{class, cxx.flag-output} = -o%s
build.prop{class, cxx.flags} = 
build.prop{class, cxx.flags-ld} = 
build.prop{class, cxx.include-paths} = 
build.prop{class, cxx.lib-paths} = 
build.prop{class, cxx.libs} = 
build.prop{class, dep.bin} = 
build.prop{class, dep.f.module} = 
build.prop{class, dep.include} = 
build.prop{class, dep.o} = 
build.prop{class, dep.o.special} = 
build.prop{class, fc} = gfortran
build.prop{class, fc.defs} = 
build.prop{class, fc.flag-compile} = -c
build.prop{class, fc.flag-define} = -D%s
build.prop{class, fc.flag-include} = -I%s
build.prop{class, fc.flag-lib} = -l%s
build.prop{class, fc.flag-lib-path} = -L%s
build.prop{class, fc.flag-module} = 
build.prop{class, fc.flag-omp} = 
build.prop{class, fc.flag-output} = -o%s
build.prop{class, fc.flags} = 
build.prop{class, fc.flags-ld} = 
build.prop{class, fc.include-paths} = 
build.prop{class, fc.lib-paths} = 
build.prop{class, fc.libs} = 
build.prop{class, file-ext.a} = .a
build.prop{class, file-ext.bin} = .exe
build.prop{class, file-ext.c} = .c .i .m .mi
build.prop{class, file-ext.cxx} = .cc .cp .cxx .cpp .CPP .c++ .C .mm .M .mii
build.prop{class, file-ext.etc} = .etc
build.prop{class, file-ext.f90-interface} = .interface
build.prop{class, file-ext.f90-mod} = .mod
build.prop{class, file-ext.fortran} = .F .F90 .F95 .FOR .FTN .f .f90 .f95 .for .ftn .inc
build.prop{class, file-ext.h} = .h
build.prop{class, file-ext.o} = .o
build.prop{class, file-ext.script} = 
build.prop{class, file-name-option.f90-mod} = 
build.prop{class, file-she.script} = 
build.prop{class, ignore-missing-dep-ns} = 
build.prop{class, keep-lib-o} = 
build.prop{class, ld} = 
build.prop{class, link-without-ar} = 
build.prop{class, no-dep.bin} = 
build.prop{class, no-dep.f.module} = 
build.prop{class, no-dep.include} = 
build.prop{class, no-dep.o} = 
build.prop{class, no-dep.o.special} = 
build.prop{class, no-inherit-source} = 
build.prop{class, no-inherit-target-category} = bin etc lib
build.prop{class, no-step-source} = 
build.prop{class, ns-dep.o} = 
extract.prop{class, diff3} = diff3
extract.prop{class, diff3.flags} = -E -m
preprocess.prop{class, cpp} = cpp
preprocess.prop{class, cpp.defs} = 
preprocess.prop{class, cpp.flag-define} = -D%s
preprocess.prop{class, cpp.flag-include} = -I%s
preprocess.prop{class, cpp.flags} = 
preprocess.prop{class, cpp.include-paths} = 
preprocess.prop{class, dep.include} = 
preprocess.prop{class, file-ext.cpp} = .c .m .cc .cp .cxx .cpp .CPP .c++ .C .mm .M
preprocess.prop{class, file-ext.fpp} = .F90 .F95 .F .FTN .FOR
preprocess.prop{class, file-ext.h} = .h
preprocess.prop{class, fpp} = cpp
preprocess.prop{class, fpp.defs} = 
preprocess.prop{class, fpp.flag-define} = -D%s
preprocess.prop{class, fpp.flag-include} = -I%s
preprocess.prop{class, fpp.flags} = -P -traditional
preprocess.prop{class, fpp.include-paths} = 
preprocess.prop{class, ignore-missing-dep-ns} = 
preprocess.prop{class, no-dep.include} = 
preprocess.prop{class, no-inherit-source} = 
preprocess.prop{class, no-inherit-target-category} = 
preprocess.prop{class, no-step-source} = 
extract.ns = jules
extract.path-excl[jules] = / src/control/um src/initialisation/um src/science/snow/snow_intctl.F90 src/science/surface/flake_interface.F90 src/params/um src/science/river_routing/um
extract.path-incl[jules] = bin src utils/drhook_dummy utils/mpi_dummy
extract.location{type:svn}[jules] = /home/lufla/workspace/BRAMS-6.0/source/jules-v6.0
preprocess.target{category} = src
preprocess.target{task} = install process
preprocess.prop{file-ext.h} = .inc
preprocess.prop{fpp.defs} = SCMA BL_DIAG_HACK GNU_FORTRAN MPI_DUMMY
build.target{key} = jules.exe rose-jules-run
build.prop{dep.o}[jules/src/control/standalone/jules.F90] = control.o next_time.o
build.prop{fc} = gfortran
build.prop{fc.defs} = SCMA BL_DIAG_HACK GNU_FORTRAN MPI_DUMMY
build.prop{fc.flags} =  -std=f2003 -fall-intrinsics -fmax-identifier-length=63  -ffree-line-length-132   -fimplicit-none -fbounds-check -Warray-bounds -fallow-argument-mismatch -O3  
build.prop{fc.flags-ld} =    -Wl,--rpath=/opt/apps/lib 
build.prop{fc.include-paths} =  /opt/apps/include
build.prop{fc.lib-paths} =  /opt/apps/lib
build.prop{fc.libs} =  netcdff
build.prop{no-dep.f.module} =  netcdf
build.prop{ns-dep.o}[jules/src/control/standalone/jules.F90] = jules/src/initialisation/standalone jules/src/science                   jules/src/control/imogen            jules/utils
